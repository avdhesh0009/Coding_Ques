class TrieNode{
    public:
    TrieNode** children;
    char data;
    bool isterminal;
    TrieNode(char data){
        this->data=data;
        children=new TrieNode*[26];
        for(int i=0;i<26;i++){
            children[i]=NULL;
        }
        isterminal=false;
    }
};
class Trie{
    public:
    TrieNode* root;
    Trie(){
        root=new TrieNode('\0');
    }
    void insert(TrieNode* root,string word){
        if(word.size()==0){
            root->isterminal=true;
            return;
        }
        int index=word[0]-'a';
        TrieNode* child;
        if(root->children[index]!=NULL){
            child=root->children[index];
        }
        else{
            TrieNode* n=new TrieNode(word[0]);
            root->children[index]=n;
            child=n;
        }
        insert(child,word.substr(1));
    }
       // Insert function 
    void insert(string word){
        insert(root,word);
    }
    bool search(TrieNode*root,string word){
        if(word.size()==0){
            return root->isterminal;
        }
        int index=word[0]-'a';
        TrieNode* child;
        if(root->children[index]!=NULL){
            child=root->children[index];
        }
        else{
            return false;
        }
        return search(child,word.substr(1));
    }
    //search function
    bool search(string word){
        return search(root,word);
    }
    //remove function
    void removeword(string word){
        removeword(root,word);
    }
    void removeword(TrieNode* root,string word){
        if(word.size()==0){
            root->isterminal=false;
            return;
        }
        int index=word[0]-'a';
        TrieNode* child;
        if(root->children[index]!=NULL){
         child=root->children[index];
        }
        else{
            return;
        }
        removeword(child,word.substr(1));
        // int count=0;
        // for(int i=0;i<26;i++){
        //     if(child->children[i]!=NULL){
        //         count++;
        //     }
        // }
        // if(count<=1&&(!child->isterminal)){
        //     child->children[index]=NULL;
        // }
        if(child->isterminal==false){
            for(int i=0;i<26;i++){
                if(child->children[i]!=NULL){
                    return;
                }
            }
            delete child;
            root->children[index]=NULL;
        }
    }
};
