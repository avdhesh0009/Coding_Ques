	/**********************************************************
  Following is the Binary Tree Node class structure

	template <typename T>
	class BinaryTreeNode {
    	public: 
    	T data;
    	BinaryTreeNode<T> *left;
    	BinaryTreeNode<T> *right;

    	BinaryTreeNode(T data) {
        	this->data = data;
        	left = NULL;
        	right = NULL;
    	}
	};
	
***********************************************************/
#include<climits>
class BST {
    // Define the data members
    BinaryTreeNode<int>*root;
   public:
    BST() { 
        // Implement the Constructor
        root=NULL;
    }

	/*----------------- Public Functions of BST -----------------*/
    private:
    int smallest(BinaryTreeNode<int>* root){
    if(root==NULL) return INT_MAX;
    int x=smallest(root->left);
    int y=smallest(root->right);
    int z=min(x,y);
    return min(root->data,z);
   }
 BinaryTreeNode<int>* deletefun(BinaryTreeNode<int>* root,int data){
    if(root==NULL){
        return NULL;
    }
    if(root->data==data){
        if(root->left==NULL&&root->right==NULL){
            return NULL;
        }
        if(root->left==NULL&&root->right!=NULL){
            return root->right;
        }
        if(root->right==NULL&&root->left!=NULL){
            return root->left;
        }
        else{
            int rootdata=smallest(root->right);
            BinaryTreeNode<int>*n=deletefun(root->right,rootdata);
            BinaryTreeNode<int>* newroot=new BinaryTreeNode<int>(rootdata);
            newroot->left=root->left;
            newroot->right=n;
            return newroot;
        }
    }
    if(data<root->data){
        root->left=deletefun(root->left,data);
    }
    else{
        root->right=deletefun(root->right,data);
    }
    return root;
  }
    public:
    void remove(int data){
        root=deletefun(root,data);
        return;
    }
    private:
    void print(BinaryTreeNode<int>*root){
        if(root==NULL) return;
        cout<<root->data<<":";
        if(root->left!=NULL){
            cout<<"L:"<<root->left->data<<",";
        }
        if(root->right!=NULL){
            cout<<"R:"<<root->right->data;
        }
        cout<<endl;
        print(root->left);
        print(root->right);
    }
    public:
    void print() { 
        // Implement the print() function
        print(root);
    }
    private:
    BinaryTreeNode<int>* insert(BinaryTreeNode<int>* root,int data){
        if(root==NULL){
         root=new BinaryTreeNode<int>(data);
         return root;
        }
        if(data<=root->data){
          root->left=insert(root->left,data);
        }
        else{
            root->right=insert(root->right,data);
        }
        return root;
    }
    public:
    void insert(int data) { 
        // Implement the insert() function 
        root=insert(root,data);
        return;
    }
    private:
    bool hasdata(int data,BinaryTreeNode<int>*root){
        if(root==NULL) return false;
        if(root->data==data) return true;
        if(data<root->data){
            return hasdata(data,root->left);
        }
        return hasdata(data,root->right);
    }
    public:
    bool search(int data) {
		// Implement the search() function 
        return hasdata(data,root);
    }
};
